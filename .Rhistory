precipSite <- "441624088045601"
# enter the name of the storm(s) (for plot title)
storm_name <- c("ESW1-26","ESW1-27")
# enter path and name of data file if data is not web-available
dataFile <- "M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/GLRIWATERWAY1TEST.RDB"
# Retrieve data from NWISWeb (if available), or use file names to pull data in from files exported by ADAPS
adaps_data_all <- getADAPSData(siteNo,StartDt,EndDt,precipSite,dataFile)
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/getADAPSData.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/hydrographPDF.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/hydrographInteractive.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/labDataOut.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/getADAPSData.R")
# enter NWIS station id for gaging station
siteNo <- "441624088045601"
# enter date to begin pulling data (rounded to the day)
StartDt <- '2012-07-26'
# enter date to stop pulling data (rounded to the day)
EndDt <- '2012-07-26'
# enter NWIS station id for precipitation gaging station, may or may not be identical to "siteNo"
precipSite <- "441624088045601"
# enter the name of the storm(s) (for plot title)
storm_name <- c("ESW1-26","ESW1-27")
# enter path and name of data file if data is not web-available
dataFile <- "M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/GLRIWATERWAY1TEST.RDB"
# Retrieve data from NWISWeb (if available), or use file names to pull data in from files exported by ADAPS
adaps_data_all <- getADAPSData(siteNo,StartDt,EndDt,precipSite,dataFile)
adaps_data_all <- getADAPSData(siteNo,StartDt,EndDt,precipSite,dataFile)
library(dataRetrieval)
library(googleVis)
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/hydrographPDF.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/labDataOut.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/hydrographInteractive.R")
source("M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/getADAPSData.R")
source('C:/Users/jlthomps/Desktop/git/GLRIBMPs/labDataOut.R', echo=TRUE)
# enter NWIS station id for gaging station
siteNo <- "441624088045601"
# enter date to begin pulling data (rounded to the day)
StartDt <- '2012-07-26'
# enter date to stop pulling data (rounded to the day)
EndDt <- '2012-07-26'
# enter NWIS station id for precipitation gaging station, may or may not be identical to "siteNo"
precipSite <- "441624088045601"
# enter the name of the storm(s) (for plot title)
storm_name <- c("ESW1-26","ESW1-27")
# enter path and name of data file if data is not web-available
dataFile <- "M:/NonPoint Evaluation/GLRI Edge-of-field/Splitting Record Conversion to R/GLRIWATERWAY1TEST.RDB"
# Retrieve data from NWISWeb (if available), or use file names to pull data in from files exported by ADAPS
adaps_data_all <- getADAPSData(siteNo,StartDt,EndDt,precipSite,dataFile)
# example using files getADAPSData(siteNo,StartDt,EndDt,precipSite,stageFile="jf3stage.txt",dischFile="jf3disch.txt","jf3precip.txt","jf3scod.txt")
# Generate interactive googleVis plot
hydrographPlot <- hydrographInteractive(adaps_data_all)
plot(hydrographPlot)
# Generate pdf of hydrograph to save, saved as file, eg 434425090462401hydrograph.pdf
hydrographPDF(adaps_data_all,storm_name)
# save merged data for station/storm event, saved as file, eg 434425090462401data.txt
tableOut <- adaps_data_all[,c("agency_cd","site_no","datetime","X01_00065","X02_00060","X05_99909","X04_00045")]
fileName <- paste(siteNo,"data.csv",sep="")
sink(fileName)
cat("Station:"," ",siteNo,"\t","Start date:"," ",strftime(StartDt),"\t","End date:"," ",strftime(EndDt),"\n\n")
write.table(tableOut,file="",sep=",",row.names=FALSE)
sink()
# enter the maximum possible volume for one sample bottle
maxBottleVol <- c(900,800)
# enter the maximum possible volume for one full storm sample
maxSampVol <- c(3900,2000)
# enter Storm Start date(s)
StormStart <- c(strptime("2012-07-26 03:35","%Y-%m-%d %H:%M"),strptime("2012-07-26 14:10","%Y-%m-%d %H:%M"))
#StormStart <- c(strptime("2013-10-03 15:18","%Y-%m-%d %H:%M"),strptime("2013-10-05 2:30","%Y-%m-%d %H:%M"))
# enter Storm End date(s)
StormEnd <- c(strptime("2012-07-26 05:45","%Y-%m-%d %H:%M"),strptime("2012-07-26 15:32","%Y-%m-%d %H:%M"))
#StormEnd <- c(strptime("2013-10-03 21:15","%Y-%m-%d %H:%M"),strptime("2013-10-05 11:30","%Y-%m-%d %H:%M"))
# enter Storm Name(s)
StormName <- c("ESW1.26","ESW1.27")
#StormName <- c("JF6.38","JF6.39")
# enter number for 1st bottle of each storm, if a number other than 1 is desired
subNum <- c(1,4)
# generate bottle volume table(s) for lab for each storm
tableOut <- labDataOut(adaps_data_all,StormStart,StormEnd,StormName,maxBottleVol,maxSampVol,subNum=subNum)
# look at table(s) generated for lab sample instructions for storm event(s). determine if changes are needed
for (i in 1:length(StormStart)){
print(tableOut[[i]])
}
#if a sample needs to be removed, enter the datetime(s) of the sample(s)
removeDate <- c(strptime("2012-07-26 04:52","%Y-%m-%d %H:%M"))
removeComment <- c("test")
#removeComment <- c("","Ignore bottle JF6-2, broken in shipment")
tableOut <- labDataOut(adaps_data_all,StormStart,StormEnd,StormName,maxBottleVol,maxSampVol,removeDate=removeDate,subNum=subNum)
for (i in 1:length(StormStart)){
print(tableOut[[i]])
}
#Output csv file of all intermediate volumes used for calculations
fileName <- paste(siteNo,"SampleVols.csv",sep="")
sink(fileName)
cat("Station:"," ",siteNo,"\t","Start date:"," ",strftime(StartDt),"\t","End date:"," ",strftime(EndDt),"\n\n")
write.table(tableOut[[stormNum+1]],file="",sep=",",row.names=FALSE)
sink()
str(tableOut)
fileName <- paste(siteNo,"SampleVols.csv",sep="")
sink(fileName)
cat("Station:"," ",siteNo,"\t","Start date:"," ",strftime(StartDt),"\t","End date:"," ",strftime(EndDt),"\n\n")
write.table(tableOut[[length(StormStart)+1]],file="",sep=",",row.names=FALSE)
sink()
bottlePickup <- c("2012-07-26")
# generate text file with storm event sample bottle volume table(s)
fileName <- paste(storm_name,"sampVol",".txt",sep="")
sink(fileName)
for (i in 1:stormNum) {
cat(StormName[i],"\t",strftime(StormStart[i]),"\t",strftime(StormEnd[i]),"\n\n")
print(tableOut[[i]],row.names=FALSE)
cat("\n\n")
cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"\t",sum(tableOut[[i]]$perc),"\n\n")
cat("Max Bottle Volume","\t",maxBottleVol,"\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup[i],"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
fileName <- paste(storm_name,"sampVol",".txt",sep="")
fileName
fileName <- paste(storm_name[1],"sampVol",".txt",sep="")
fileName
sink(fileName)
for (i in 1:stormNum) {
cat(StormName[i],"\t",strftime(StormStart[i]),"\t",strftime(StormEnd[i]),"\n\n")
print(tableOut[[i]],row.names=FALSE)
cat("\n\n")
cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"\t",sum(tableOut[[i]]$perc),"\n\n")
cat("Max Bottle Volume","\t",maxBottleVol,"\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup[i],"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
fileName <- paste(storm_name[1],"sampVol",".txt",sep="")
sink(fileName)
for (i in 1:length(storm_name)) {
cat(StormName[i],"\t",strftime(StormStart[i]),"\t",strftime(StormEnd[i]),"\n\n")
print(tableOut[[i]],row.names=FALSE)
cat("\n\n")
cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"\t",sum(tableOut[[i]]$perc),"\n\n")
cat("Max Bottle Volume","\t",maxBottleVol,"\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup[i],"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
fileName <- paste(storm_name[1],"sampVol",".txt",sep="")
sink(fileName)
for (i in 1:length(storm_name)) {
cat(StormName[i],"\t",strftime(StormStart[i]),"\t",strftime(StormEnd[i]),"\n\n")
print(tableOut[[i]],row.names=FALSE)
cat("\n\n")
cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"mL\t",sum(tableOut[[i]]$perc),"percent\n\n")
cat("Max Bottle Volume","\t",maxBottleVol[i],"mL\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"cubic feet\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"cubic feet\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup,"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
library(EflowStats)
library(XML)
source("C:/Users/jlthomps/My Documents/R/NWCTest/calculateStatsGroups.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/calculateStatsDiffs.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getEmptyResultArrayNWCStats.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getScenarioSites.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getSupportedStatNames.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getWFSFieldAsNumeric.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/MonthlyAnnualGoF.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/nameStatsArray.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/nse.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/nselog.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/RegionalGoF.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/rmse.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/rmsne.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/rsr.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/SiteGoF.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/skew.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/SWE_CSV_IHA.R")
source("C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_all.R")
source("C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_ICP.R")
## Inputs: uncomment for non Rserve execuation. ##
#sites <- '02177000,02178400'
startdate <- "2008-10-01"
enddate <- "2013-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat"
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
## end inputs ##
nwisDvUrl <- "http://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites="
offering <- "00003"
property <- "00060"
drainage_url <- "http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
scenario_url <- paste(substr(model_url,1,regexpr("Get",model_url)-1),"GetCapabilities&service=SOS&version=1.0.0",sep="")
getcap<-getScenarioSites(scenario_url)
modprop<-getcap$modprop
sites<-getcap$scenario_sites[1:3]
sites <- paste(sites,collapse=",")
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
x_urls<-paste(nwisDvUrl, sites, "&startDT=", startdate, "&endDT=", enddate, "&statCd=", offering, "&parameterCd=", property, sep = "")
d_urls<-paste(drainage_url, sites, sep = "")
m_urls<-paste(model_url,'=',sites,'&observedProperty=',modprop,sep='',collapse=NULL)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
library(HydroGOF)
library(HydroGoF)
library(hydroGoF)
library(hydroGOF)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
output = "output.txt"
write.table(statsout, file = output, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
View(statsout)
View(statsout)
statsout$nse
statsout$nselog
statsout$rmse
statsout$rmsne
nrow(statsout)
ncol(statsout)
supportedStats=getSupportedStatNames()
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
stats
stats=="GoF"
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
X_DATA_FUN<-getXMLWML1.1Data
x_args<-x_urls
DRAIN_AREA_FUN<-getDrainageArea
drain_args<-d_urls
M_DATA_FUN<-SWE_CSV_IHA
m_args<-m_urls
supportedStats=getSupportedStatNames()
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
i<-1
site = sites[i]
m_data <- M_DATA_FUN(m_args[i])
startdate<-min(m_data$date)
enddate<-max(m_data$date)
interval<-''
latest<-''
x_data <- X_DATA_FUN(x_args[i])
obs_data <- get_obsdata(x_data)
obs_count<-nrow(x_data)
cat(paste("get_obsdata run on x_obs for site",site,obs_count,"\n",sep=" "))
m_data$date <- as.Date(m_data$date,format="%Y-%m-%d")
m_data<-m_data[m_data$date>=min(x_data$date) & m_data$date<=max(x_data$date), ]
drain_area<-DRAIN_AREA_FUN(drain_args[i])
cat(paste("data and drainage area retrieved for site",site,drain_area,"\n",sep=" "))
mod_data <- get_obsdata(m_data)
mod_count <- nrow(mod_data)
cat(paste("get_obsdata run on x_mod for site",site,mod_count,"\n",sep=" "))
countbyyr<-aggregate(obs_data$discharge, list(obs_data$wy_val), length)
countbyyr_mod<-aggregate(mod_data$discharge, list(mod_data$wy_val), length)
colnames(countbyyr)<-c('wy','num_samples')
colnames(countbyyr_mod)<-c('wy','num_samples')
sub_countbyyr<-subset(countbyyr,num_samples >= 365)
sub_countbyyr_mod<-subset(countbyyr_mod,num_samples >= 365)
include_yrs<-merge(sub_countbyyr,sub_countbyyr_mod)
obs_data<-merge(obs_data,include_yrs,by.x="wy_val",by.y="wy")
mod_data<-merge(mod_data,include_yrs,by.x="wy_val",by.y="wy")
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("data sets merged for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$min_date[i] <- as.character(min(obs_data$date))
tempArrays$max_date[i] <- as.character(max(obs_data$date))
cat(paste("dates calculated for site",site,"\n",sep=" "))
obs_data <- obs_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
mod_data <- mod_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("dfs created for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
tempArrays$ModStats[i, ] <- FlowStatsICP(mod_data,drain_area)
tempArrays$DiffStats[i, ] <- (tempArrays$ModStats[i, ]-tempArrays$ObsStats[i, ])/tempArrays$ObsStats[i, ]
cat("diffs calculated \n")
tempArrays$GoFStats[i, ] <- SiteGoF(obs_data, mod_data)
View(tempArrays$ObsStats)
View(tempArrays$ModStats)
View(tempArrays$DiffStats)
View(tempArray$GoFStats)
View(tempArrays$GoFStats)
source('~/R/NWCTest/calculateStatsDiffs.R', echo=TRUE)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
View(statsout)
source('~/R/NWCTest/nameStatsArray.R', echo=TRUE)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
View(statsout)
output = "output.txt"
write.table(statsout, file = output, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
library(zoo)
library(chron)
library(doBy)
library(XML)
library(RCurl)
library(lmomco)
library(hydroGOF)
library(devtools)
library(devtools)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
library(lmomco)
sites<-"02177000"
qfiletempf<-sampleData
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_ICP.R', echo=TRUE)
FlowStatsICP(qfiletempf)
qfiletempf$date <- as.Date(timeseries1$timeseries1.date,"%m/%d/%y")
qfiletempf$date <- as.Date(qfiletempf$date,"%m/%d/%y")
FlowStatsICP(qfiletempf)
drainage_url<-"http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
drain_url<-paste(drainage_url,sites,sep="")
drain_area<-getDrainageArea(drain_url)
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_ICP.R', echo=TRUE)
FlowStatsICP(qfiletempf,drain_area)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/plot.monthly.mean.R', echo=TRUE)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
qfiletempf<-sampleData
meanmonts<-monthly.mean.ts(qfiletempf)
plot.monthly.mean(meanmonts,'02178400')
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
run_examples()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
run_examples()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
run_examples()
# test()   Assumes testthat type tests in GLRI/inst/tests
setwd("C:/Users/jlthomps/Desktop/git/")
build("EflowStats")
install("EflowStats")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
library(zoo)
library(chron)
library(doBy)
library(XML)
library(RCurl)
library(hydroGOF)
library(lmomco)
library(devtools)
install("EflowStats")
detach("package:HITHATStats", unload=TRUE)
detach("package:EflowStats", unload=TRUE)
install("EflowStats")
remove.packages("HITHATStats")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
library("EflowStats", lib.loc="C:/Users/jlthomps/Documents/R/win-library/2.14")
check()
?getDrainageArea
run_examples()
SiteFoF
SiteGoF
run_examples()
emptyArrays<-getEmptyResultArrayNWCStats("GoF", 2, getSupportedStatNames())
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getEmptyResultArrayNWCStats.R', echo=TRUE)
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getSupportedStatNames.R', echo=TRUE)
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getWFSFieldAsNumeric.R', echo=TRUE)
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/nameStatsArray.R', echo=TRUE)
run_examples()
check()
?getDrainageArea
?getWFSFieldAsNumeric
library("NWCCompare", lib.loc="C:/Users/jlthomps/Documents/R/win-library/2.14")
?getWFSFieldAsNumeric
detach("package:NWCCompare", unload=TRUE)
library(EflowStats)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
qfiletempf <- read.csv("C:/Users/jlthomps/Desktop/git/NWCCompare/data/qfiletempf.csv")
View(qfiletempf)
View(qfiletempf)
?saveRDS
getwd
getwd()
cd data
save(qfiletempf,file="qfiletempf.Rdata")
a<-qfiletempf
View(qfiletempf)
a<-qfiletempf
str(a)
obs_data <- read.csv("C:/Users/jlthomps/Desktop/git/NWCCompare/data/obs_data.csv")
View(obs_data)
mod_data <- read.csv("C:/Users/jlthomps/Desktop/git/NWCCompare/data/mod_data.csv")
View(mod_data)
str(mod_data)
str(a)
load_data<-paste(system.file(package="NWCCompare"),"/data/qfiletempf.csv",sep="")
str(load_data)
Gaged<-read.csv(load_data,stringsAsFactors=FALSE)
str(Gaged)
save(Gaged,file="qfiletempf.Rdata")
obs_data<-paste(system.file(package="NWCCompare"),"/data/obs_data.csv",sep="")
mod_data<-paste(system.file(package="NWCCompare"),"/data/mod_data.csv",sep="")
str(obs_data)
timeseries1<-read.csv(obs_data)$discharge
timeseries2<-read.csv(mod_data)$discharge
str(timeseries1)
str(timeseries2)
timeseries1<-read.csv(obs_data,stringsAsFactors=FALSE)
str(timeseries1)
timeseries2<-read.csv(mod_data,stringsAsFactors=FALSE)
save(timeseries1,file="obs_data.Rdata")
save(timeseries2,file="mod_data.Rdata")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
save(Gaged,file="qfiletempf.RData")
save(timeseries1,file="obs_data.RData")
save(timeseries2,file="mod_data.RData")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
run_examples()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
run_examples()
devtools::load_all(".")
devtools::load_all(".")
library(NWCCompare)
library(NWCCompare)
