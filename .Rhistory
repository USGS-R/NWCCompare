cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"\t",sum(tableOut[[i]]$perc),"\n\n")
cat("Max Bottle Volume","\t",maxBottleVol,"\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup[i],"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
fileName <- paste(storm_name[1],"sampVol",".txt",sep="")
sink(fileName)
for (i in 1:length(storm_name)) {
cat(StormName[i],"\t",strftime(StormStart[i]),"\t",strftime(StormEnd[i]),"\n\n")
print(tableOut[[i]],row.names=FALSE)
cat("\n\n")
cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"\t",sum(tableOut[[i]]$perc),"\n\n")
cat("Max Bottle Volume","\t",maxBottleVol,"\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup[i],"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
fileName <- paste(storm_name[1],"sampVol",".txt",sep="")
sink(fileName)
for (i in 1:length(storm_name)) {
cat(StormName[i],"\t",strftime(StormStart[i]),"\t",strftime(StormEnd[i]),"\n\n")
print(tableOut[[i]],row.names=FALSE)
cat("\n\n")
cat("Lab Sample Volume","\t",sum(tableOut[[i]]$mL),"mL\t",sum(tableOut[[i]]$perc),"percent\n\n")
cat("Max Bottle Volume","\t",maxBottleVol[i],"mL\n\n")
cat("Max Sample Runoff Volume","\t",max(tableOut[[i]]$volume),"cubic feet\n\n")
cat("Total Sampled Storm Volume","\t",sum(tableOut[[i]]$volume),"cubic feet\n\n")
cat("Bottles ",tableOut[[i]]$subNum[1]," through ",tableOut[[i]]$subNum[length(tableOut[[i]]$subNum)]," picked up ",bottlePickup,"\n\n")
if (length(removeComment[i])>0) {cat(removeComment[i],"\n\n")}
cat("========================================================================================================","\n\n")
}
sink()
library(EflowStats)
library(XML)
source("C:/Users/jlthomps/My Documents/R/NWCTest/calculateStatsGroups.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/calculateStatsDiffs.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getEmptyResultArrayNWCStats.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getScenarioSites.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getSupportedStatNames.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/getWFSFieldAsNumeric.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/MonthlyAnnualGoF.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/nameStatsArray.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/nse.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/nselog.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/RegionalGoF.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/rmse.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/rmsne.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/rsr.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/SiteGoF.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/skew.R")
source("C:/Users/jlthomps/My Documents/R/NWCTest/SWE_CSV_IHA.R")
source("C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_all.R")
source("C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_ICP.R")
## Inputs: uncomment for non Rserve execuation. ##
#sites <- '02177000,02178400'
startdate <- "2008-10-01"
enddate <- "2013-09-29"
stats<-"rateStat,magnifSeven,magStat,flowStat,durStat,timStat"
model_url="http://cida.usgs.gov/nwc/thredds/sos/watersmart/stats/stats-SE-DENSE2-2.03.nc?request=GetObservation&service=SOS&version=1.0.0&offering"
## end inputs ##
nwisDvUrl <- "http://waterservices.usgs.gov/nwis/dv/?format=waterml,1.1&sites="
offering <- "00003"
property <- "00060"
drainage_url <- "http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
scenario_url <- paste(substr(model_url,1,regexpr("Get",model_url)-1),"GetCapabilities&service=SOS&version=1.0.0",sep="")
getcap<-getScenarioSites(scenario_url)
modprop<-getcap$modprop
sites<-getcap$scenario_sites[1:3]
sites <- paste(sites,collapse=",")
sites<-read.csv(header=F,colClasses=c("character"),text=sites)
x_urls<-paste(nwisDvUrl, sites, "&startDT=", startdate, "&endDT=", enddate, "&statCd=", offering, "&parameterCd=", property, sep = "")
d_urls<-paste(drainage_url, sites, sep = "")
m_urls<-paste(model_url,'=',sites,'&observedProperty=',modprop,sep='',collapse=NULL)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
library(HydroGOF)
library(HydroGoF)
library(hydroGoF)
library(hydroGOF)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
output = "output.txt"
write.table(statsout, file = output, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
View(statsout)
View(statsout)
statsout$nse
statsout$nselog
statsout$rmse
statsout$rmsne
nrow(statsout)
ncol(statsout)
supportedStats=getSupportedStatNames()
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
stats
stats=="GoF"
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
X_DATA_FUN<-getXMLWML1.1Data
x_args<-x_urls
DRAIN_AREA_FUN<-getDrainageArea
drain_args<-d_urls
M_DATA_FUN<-SWE_CSV_IHA
m_args<-m_urls
supportedStats=getSupportedStatNames()
stats="GoF"
tempArrays<-getEmptyResultArrayNWCStats(stats, length(sites), supportedStats)
i<-1
site = sites[i]
m_data <- M_DATA_FUN(m_args[i])
startdate<-min(m_data$date)
enddate<-max(m_data$date)
interval<-''
latest<-''
x_data <- X_DATA_FUN(x_args[i])
obs_data <- get_obsdata(x_data)
obs_count<-nrow(x_data)
cat(paste("get_obsdata run on x_obs for site",site,obs_count,"\n",sep=" "))
m_data$date <- as.Date(m_data$date,format="%Y-%m-%d")
m_data<-m_data[m_data$date>=min(x_data$date) & m_data$date<=max(x_data$date), ]
drain_area<-DRAIN_AREA_FUN(drain_args[i])
cat(paste("data and drainage area retrieved for site",site,drain_area,"\n",sep=" "))
mod_data <- get_obsdata(m_data)
mod_count <- nrow(mod_data)
cat(paste("get_obsdata run on x_mod for site",site,mod_count,"\n",sep=" "))
countbyyr<-aggregate(obs_data$discharge, list(obs_data$wy_val), length)
countbyyr_mod<-aggregate(mod_data$discharge, list(mod_data$wy_val), length)
colnames(countbyyr)<-c('wy','num_samples')
colnames(countbyyr_mod)<-c('wy','num_samples')
sub_countbyyr<-subset(countbyyr,num_samples >= 365)
sub_countbyyr_mod<-subset(countbyyr_mod,num_samples >= 365)
include_yrs<-merge(sub_countbyyr,sub_countbyyr_mod)
obs_data<-merge(obs_data,include_yrs,by.x="wy_val",by.y="wy")
mod_data<-merge(mod_data,include_yrs,by.x="wy_val",by.y="wy")
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("data sets merged for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$min_date[i] <- as.character(min(obs_data$date))
tempArrays$max_date[i] <- as.character(max(obs_data$date))
cat(paste("dates calculated for site",site,"\n",sep=" "))
obs_data <- obs_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
mod_data <- mod_data[,c('wy_val','date','discharge','month_val','year_val','day_val','jul_val')]
obs_count <- nrow(obs_data)
mod_count <- nrow(mod_data)
cat(paste("dfs created for site",site,obs_count,mod_count,"\n",sep=" "))
tempArrays$ObsStats[i, ] <- FlowStatsICP(obs_data,drain_area)
tempArrays$ModStats[i, ] <- FlowStatsICP(mod_data,drain_area)
tempArrays$DiffStats[i, ] <- (tempArrays$ModStats[i, ]-tempArrays$ObsStats[i, ])/tempArrays$ObsStats[i, ]
cat("diffs calculated \n")
tempArrays$GoFStats[i, ] <- SiteGoF(obs_data, mod_data)
View(tempArrays$ObsStats)
View(tempArrays$ModStats)
View(tempArrays$DiffStats)
View(tempArray$GoFStats)
View(tempArrays$GoFStats)
source('~/R/NWCTest/calculateStatsDiffs.R', echo=TRUE)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
View(statsout)
source('~/R/NWCTest/nameStatsArray.R', echo=TRUE)
statsout <- calculateStatsDiffs(sites, startdate, enddate, getXMLWML1.1Data, x_urls, getDrainageArea, d_urls, SWE_CSV_IHA, m_urls)
View(statsout)
output = "output.txt"
write.table(statsout, file = output, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
library(zoo)
library(chron)
library(doBy)
library(XML)
library(RCurl)
library(lmomco)
library(hydroGOF)
library(devtools)
library(devtools)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
library(lmomco)
sites<-"02177000"
qfiletempf<-sampleData
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_ICP.R', echo=TRUE)
FlowStatsICP(qfiletempf)
qfiletempf$date <- as.Date(timeseries1$timeseries1.date,"%m/%d/%y")
qfiletempf$date <- as.Date(qfiletempf$date,"%m/%d/%y")
FlowStatsICP(qfiletempf)
drainage_url<-"http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
drain_url<-paste(drainage_url,sites,sep="")
drain_area<-getDrainageArea(drain_url)
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/FlowStats_ICP.R', echo=TRUE)
FlowStatsICP(qfiletempf,drain_area)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/plot.monthly.mean.R', echo=TRUE)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
qfiletempf<-sampleData
meanmonts<-monthly.mean.ts(qfiletempf)
plot.monthly.mean(meanmonts,'02178400')
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
run_examples()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
run_examples()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("EflowStats/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/EflowStats")
document()
check()
run_examples()
# test()   Assumes testthat type tests in GLRI/inst/tests
setwd("C:/Users/jlthomps/Desktop/git/")
build("EflowStats")
install("EflowStats")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
library(zoo)
library(chron)
library(doBy)
library(XML)
library(RCurl)
library(hydroGOF)
library(lmomco)
library(devtools)
install("EflowStats")
detach("package:HITHATStats", unload=TRUE)
detach("package:EflowStats", unload=TRUE)
install("EflowStats")
remove.packages("HITHATStats")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
library("EflowStats", lib.loc="C:/Users/jlthomps/Documents/R/win-library/2.14")
check()
?getDrainageArea
run_examples()
SiteFoF
SiteGoF
run_examples()
emptyArrays<-getEmptyResultArrayNWCStats("GoF", 2, getSupportedStatNames())
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getEmptyResultArrayNWCStats.R', echo=TRUE)
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getSupportedStatNames.R', echo=TRUE)
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/getWFSFieldAsNumeric.R', echo=TRUE)
run_examples()
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/nameStatsArray.R', echo=TRUE)
run_examples()
check()
?getDrainageArea
?getWFSFieldAsNumeric
library("NWCCompare", lib.loc="C:/Users/jlthomps/Documents/R/win-library/2.14")
?getWFSFieldAsNumeric
detach("package:NWCCompare", unload=TRUE)
library(EflowStats)
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
qfiletempf <- read.csv("C:/Users/jlthomps/Desktop/git/NWCCompare/data/qfiletempf.csv")
View(qfiletempf)
View(qfiletempf)
?saveRDS
getwd
getwd()
cd data
save(qfiletempf,file="qfiletempf.Rdata")
a<-qfiletempf
View(qfiletempf)
a<-qfiletempf
str(a)
obs_data <- read.csv("C:/Users/jlthomps/Desktop/git/NWCCompare/data/obs_data.csv")
View(obs_data)
mod_data <- read.csv("C:/Users/jlthomps/Desktop/git/NWCCompare/data/mod_data.csv")
View(mod_data)
str(mod_data)
str(a)
load_data<-paste(system.file(package="NWCCompare"),"/data/qfiletempf.csv",sep="")
str(load_data)
Gaged<-read.csv(load_data,stringsAsFactors=FALSE)
str(Gaged)
save(Gaged,file="qfiletempf.Rdata")
obs_data<-paste(system.file(package="NWCCompare"),"/data/obs_data.csv",sep="")
mod_data<-paste(system.file(package="NWCCompare"),"/data/mod_data.csv",sep="")
str(obs_data)
timeseries1<-read.csv(obs_data)$discharge
timeseries2<-read.csv(mod_data)$discharge
str(timeseries1)
str(timeseries2)
timeseries1<-read.csv(obs_data,stringsAsFactors=FALSE)
str(timeseries1)
timeseries2<-read.csv(mod_data,stringsAsFactors=FALSE)
save(timeseries1,file="obs_data.Rdata")
save(timeseries2,file="mod_data.Rdata")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
save(Gaged,file="qfiletempf.RData")
save(timeseries1,file="obs_data.RData")
save(timeseries2,file="mod_data.RData")
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
check()
run_examples()
setwd("C:/Users/jlthomps/Desktop/git")
load_all("NWCCompare/",reset = TRUE)
setwd("C:/Users/jlthomps/Desktop/git/NWCCompare")
document()
run_examples()
devtools::load_all(".")
devtools::load_all(".")
library(NWCCompare)
library(NWCCompare)
devtools::load_all(".")
library(EflowStats)
getDrainageArea
source('C:/Users/jlthomps/Desktop/git/EflowStats/R/getDrainageArea.R', echo=TRUE)
getDrainageARea
getDrainageArea
drainage_url<-"http://waterservices.usgs.gov/nwis/site/?siteOutput=Expanded&site="
sites<-"02177000"
drain_url<-paste(drainage_url,sites,sep="")
drain_area<-getDrainageArea(drain_url)
devtools::load_all(".")
devtools::load_all(".")
timeseries1<-qfiletempf
obs_data<-obs_data
timeseries1<-obs_data$discharge
timeseries1<-sampleData
OtherStats(timeseries1)
devtools::load_all(".")
drain_area<-54
qfiletempf<-sampleData
qfiletempf$date <- as.Date(qfiletempf$date,"%m/%d/%y")
data<-qfiletempf
dfOut <- vector()
otherstat <- OtherStatsICP(data)
timeseries1<-sampleData
devtools::load_all(".")
drain_area<-54
qfiletempf<-sampleData
dfOut <- vector()
data<-qfiletempf
otherstat <- OtherStatsICP(data)
sdbyyr <- aggregate(data$discharge, list(data$wy_val),
sd)
colnames(sdbyyr) <- c("Year", "sdq")
meanbyyr <- aggregate(data$discharge, list(data$wy_val),
mean, na.rm=TRUE)
colnames(meanbyyr) <- c("Year", "meanq")
medbyyr <- aggregate(data$discharge, list(data$wy_val),
median, na.rm=TRUE)
colnames(medbyyr) <- c("Year","medq")
dfcvbyyr <- data.frame(meanbyyr$Year, sdbyyr$sdq,
meanbyyr$meanq, medbyyr$medq,stringsAsFactors=FALSE)
colnames(dfcvbyyr) <- c("Year", "sdq", "meanq", "medq")
cvbyyr <- dfcvbyyr$sdq/dfcvbyyr$meanq
dfcvbyyrf <- data.frame(dfcvbyyr, cvbyyr, stringsAsFactors=FALSE)
colnames(dfcvbyyrf) <- c("Year", "sdq", "meanq", "medq",
"cvq")
mean_flow<-round(mean(dfcvbyyrf$meanq,na.rm=TRUE),digits=2)
med_flow<-round(median(dfcvbyyrf$meanq,na.rm=TRUE),digits=2)
cv_flow<-round(cv(dfcvbyyrf$meanq),digits=2)
cv_daily<-round(cv(data$discharge),digits=2)
l7Q10v<-l7Q10(data)
l7Q2v<-l7Q2(data)
return_10v<-return_10(data)
obs_percentiles <- flow_perc(data$discharge)
obs_percentiles <- flow_perc(data)
flow_10 <- obs_percentiles[1]
flow_25 <- obs_percentiles[2]
flow_50 <- obs_percentiles[3]
flow_75 <- obs_percentiles[4]
flow_90 <- obs_percentiles[5]
flow_15 <- obs_percentiles[6]
source('C:/Users/jlthomps/Desktop/git/NWCCompare/R/OtherStatsICP.r', echo=TRUE)
FlowStatsICP(qfiletempf,drain_area)
dfOut <- vector()
otherstat <- OtherStatsICP(data)
dfOut <- c(dfOut,otherstat)
ma26v<-ma24.35(data)[3,1]
ma41v<-unlist(ma41.45(data,drain_area)[1])
ml18v<-ml18(data)
ml20v<-ml20(data)
mh10v<-unlist(mh1.12(data)[10])
dfOut <- c(dfOut,ma26v,ma41v,ml18v,ml20v,mh10v)
fl2v<-unname(unlist(fl1.2(data)[2]))
fh6v<-fh6(data)
fh7v<-fh7(data)
dfOut <- c(dfOut,fl2v,fh6v,fh7v)
dl6v<-dl6(data)
dl13v<-dl13(data)
dl16v<-unname(unlist(dl16.17(data)[1]))
dfOut <- c(dfOut,dl6v,dl13v,dl16v)
ta1v<-unname(unlist(ta1.2(data)[1]))
tl1v<-unname(unlist(tl1.2(data)[1]))
th1v<-unname(unlist(th1.2(data)[1]))
dfOut <- c(dfOut,ta1v,tl1v,th1v)
ra5v<-ra5(data)
ra7v<-ra7(data)
ra8v<-unname(unlist(ra8.9(data)[1]))
dfOut <- c(dfOut,ra5v,ra7v,ra8v)
Output<-dfOut
devtools::load_all(".")
devtools::load_all(".")
wfs_url<-'http://cida.usgs.gov/nwc/geoserver/NHDPlusHUCs/ows'
wfsTypename='NHDPlusHUCs:huc12_SE_Basins_v2'
wfsProperty='NHDPlusHUCs:HUC12'
wfsPropertyname='NHDPlusHUCs:mi2'
wfsLiteral='031401020800'
area<-getWFSFieldAsNumeric(wfs_url,wfsTypename,wfsProperty,wfsLiteral,wfsPropertyname)
service_string <- '?service=WFS&version=1.0.0&request=GetFeature&typeName=TYPENAME_REPLACE&outputFormat=csv&filter=%3Cogc:Filter%20xmlns:ogc=%22http://www.opengis.net/ogc%22%3E%20%3Cogc:PropertyIsEqualTo%3E%20%3Cogc:PropertyName%3EPROPERTY_REPLACE%3C/ogc:PropertyName%3E%3Cogc:Literal%3ELITERAL_REPLACE%3C/ogc:Literal%3E%3C/ogc:PropertyIsEqualTo%3E%20%3C/ogc:Filter%3E&propertyName=PROPERTYNAME_REPLACE'
wfs_url <- paste(wfs_url,service_string,sep="")
wfs_url <- gsub('TYPENAME_REPLACE',wfsTypename,wfs_url)
wfs_url <- gsub('PROPERTY_REPLACE',wfsProperty,wfs_url)
wfs_url <- gsub('LITERAL_REPLACE',wfsLiteral,wfs_url)
wfs_url <- gsub('PROPERTYNAME_REPLACE',wfsPropertyname,wfs_url)
grepl(':',wfsPropertyname)
wfs_col<-strsplit(wfsPropertyname,':')[[1]][2]
drain_area <- as.numeric(read.delim(wfs_url, header=TRUE, sep=",", colClasses=c("character"))[wfs_col]) # Note that this is in square miles as required by underlying package.
wfs_url
wfsTypename='NHDPlusHUCs:NationalWBDSnapshot'
wfs_url<-'http://cida.usgs.gov/nwc/geoserver/NHDPlusHUCs/ows'
service_string <- '?service=WFS&version=1.0.0&request=GetFeature&typeName=TYPENAME_REPLACE&outputFormat=csv&filter=%3Cogc:Filter%20xmlns:ogc=%22http://www.opengis.net/ogc%22%3E%20%3Cogc:PropertyIsEqualTo%3E%20%3Cogc:PropertyName%3EPROPERTY_REPLACE%3C/ogc:PropertyName%3E%3Cogc:Literal%3ELITERAL_REPLACE%3C/ogc:Literal%3E%3C/ogc:PropertyIsEqualTo%3E%20%3C/ogc:Filter%3E&propertyName=PROPERTYNAME_REPLACE'
wfs_url <- paste(wfs_url,service_string,sep="")
wfs_url <- gsub('TYPENAME_REPLACE',wfsTypename,wfs_url)
wfs_url <- gsub('PROPERTY_REPLACE',wfsProperty,wfs_url)
wfs_url <- gsub('LITERAL_REPLACE',wfsLiteral,wfs_url)
wfs_url <- gsub('PROPERTYNAME_REPLACE',wfsPropertyname,wfs_url)
wfs_col<-strsplit(wfsPropertyname,':')[[1]][2]
wfs_col
wfs_url
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(NWCCompare)
devtools::load_all(".")
library(NWCCompare)
devtools::load_all(".")
library(NWCCompare)
